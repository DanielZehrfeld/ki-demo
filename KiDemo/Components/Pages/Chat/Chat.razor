@page "/"
@using System.Drawing
@using KiDemo.Backend
@rendermode InteractiveServer

<PageTitle>Chat</PageTitle>

<div class="chat-container">
	<div class="message-list">
		@foreach (var message in _messages)
		{
			<button class="message-item" @onclick="() => SelectMessage(message.Id)">@message.DisplayName</button>
		}
	</div>

	<div class="main-area">

		<div class="input-area">
			<input type="text" @bind="_messageTextToSubmit" placeholder="Enter text..."/>
			<button class="btn btn-primary" @onclick="AddItem" disabled="@_isSubmitBtnDisabled">Submit</button>

			<div class="status-info">
				<span class="processing-lamp" style="background-color: @(_isProcessing ? "green" : "blueviolet");"></span>
				<span>Total token count: @_totalTokenCount</span>
			</div>

		</div>

		<div class="content-area">
			<div>
				<h3>Input</h3>
				<textarea readonly>@_selectedMessageContent</textarea>
			</div>
			<div>
				<h3>Output</h3>
				<textarea readonly>@_selectedMessageReply</textarea>
			</div>
			<textarea class="metadata-area" readonly>@_selectedMessageMetadata</textarea>
		</div>
		

	</div>
</div>

@inject ChatVm ViewModel

@code {
	private List<MessageItemVm> _messages = new List<MessageItemVm>();


	private string _messageTextToSubmit = string.Empty;
	private string _selectedMessageContent = string.Empty;
	private string _selectedMessageReply = string.Empty;
	private string _selectedMessageMetadata = string.Empty;

	private bool _isSubmitBtnDisabled = false;
	private bool _isProcessing = false;
	private long _totalTokenCount = 0;


	protected override void OnInitialized()
	{

		ViewModel.MessageItems.Subscribe(OnMessagesChanged);
		ViewModel.MessageDetails.Subscribe(OnMessageDetails);
		ViewModel.ServiceState.Subscribe(OnServiceState);

		ViewModel.StateHasChanged.Subscribe(_ => InvokeAsync(StateHasChanged));
	}

	private void OnMessagesChanged(MessageItemVm[] messages)
	{
		_messages = messages.ToList();
	}

	private void OnMessageDetails(MessageDetailsVm messageDetails)
	{
		_selectedMessageContent = messageDetails.MessageContent;
		_selectedMessageReply = messageDetails.MessageReply;
		_selectedMessageMetadata = messageDetails.MessageMetadata;
	}

	private void OnServiceState(ServiceStateVm serviceState)
	{
		_isSubmitBtnDisabled = !serviceState.IsSubmitEnabled;
		_totalTokenCount = serviceState.TotalTokenCount;
		_isProcessing = serviceState.IsProcessing;
	}

	private void AddItem()
	{
		if (!string.IsNullOrWhiteSpace(_messageTextToSubmit))
		{
			ViewModel.SubmitMessage(_messageTextToSubmit);
			_messageTextToSubmit = string.Empty;
		}
	}

	private void SelectMessage(Guid messageId)
	{
		ViewModel.SelectMessage(messageId);
	}
}